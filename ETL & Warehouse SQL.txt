/*
Author: Pranit Yadav
EID: py2845
ETL and Warehouses
*/


/*
The common fields between the two tables are ID, First name, Last name, Email,
Phone, Address, and Zip.
*/

--------------------------------------------------------------------------------


CREATE TABLE rider_dw (
    rider_id      NUMBER         NOT NULL,
    first_name    VARCHAR(50)    NOT NULL,
    last_name     VARCHAR(50)    NOT NULL,
    email         VARCHAR(50)    NOT NULL,
    phone         CHAR(12)       NOT NULL,
    address       VARCHAR(50)    NOT NULL,
    zip           CHAR(5)        NOT NULL,
    data_source   CHAR(4)        NOT NULL,  
    CONSTRAINT rider_dw_pk PRIMARY KEY (rider_id, data_source)
);

--------------------------------------------------------------------------------

CREATE VIEW rider_view AS
SELECT
    rider_id,
    first_name,
    last_name,
    email,
    phone,
    address,
    zip,
    'RIDR' AS data_source
FROM rider;


CREATE VIEW riders_acquired_view AS
SELECT
    acquired_rider_id AS rider_id,
    RA_first_name AS first_name,
    RA_last_name AS last_name,
    RA_email AS email,
    SUBSTR(RA_phone, 1, 3) || '-' || 
    SUBSTR(RA_phone, 4, 3) || '-' || 
    SUBSTR(RA_phone, 7, 4) AS phone,
    RA_address AS address,
    RA_zip_code AS zip,
    'AQUI' AS data_source
FROM riders_acquired;

--------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE update_rider_dw AS

BEGIN
    -- Insert new records from rider_view
    INSERT INTO rider_dw (rider_id, first_name, last_name, email, phone, address, zip, data_source)
    SELECT r.rider_id, r.first_name, r.last_name, r.email, r.phone, r.address, r.zip, r.data_source
    FROM rider_view r
    WHERE NOT EXISTS (
        SELECT rider_id FROM rider_dw dw
        WHERE dw.rider_id = r.rider_id AND dw.data_source = 'RIDR'
    );

    -- Insert new records from riders_acquired_view
    INSERT INTO rider_dw (rider_id, first_name, last_name, email, phone, address, zip, data_source)
    SELECT ra.rider_id, ra.first_name, ra.last_name, ra.email, ra.phone, ra.address, ra.zip, ra.data_source
    FROM riders_acquired_view ra
    WHERE NOT EXISTS (
        SELECT rider_id FROM rider_dw dw
        WHERE dw.rider_id = ra.rider_id AND dw.data_source = 'AQUI'
    );

    COMMIT;
END;
/

--------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE update_rider_dw AS
BEGIN
    -- Merge rider_view into rider_dw
    MERGE INTO rider_dw dw
    USING (
        SELECT rider_id, first_name, last_name, email, phone, address, zip, data_source
        FROM rider_view
    ) r
    ON (dw.rider_id = r.rider_id AND dw.data_source = 'RIDR')
    WHEN MATCHED THEN
        UPDATE SET
            dw.first_name = r.first_name,
            dw.last_name  = r.last_name,
            dw.email      = r.email,
            dw.phone      = r.phone,
            dw.address    = r.address,
            dw.zip        = r.zip
    WHEN NOT MATCHED THEN
        INSERT (rider_id, first_name, last_name, email, phone, address, zip, data_source)
        VALUES (r.rider_id, r.first_name, r.last_name, r.email, r.phone, r.address, r.zip, r.data_source);

    -- Merge riders_acquired_view into rider_dw
    MERGE INTO rider_dw dw
    USING (
        SELECT rider_id, first_name, last_name, email, phone, address, zip, data_source
        FROM riders_acquired_view
    ) ra
    ON (dw.rider_id = ra.rider_id AND dw.data_source = 'AQUI')
    WHEN MATCHED THEN
        UPDATE SET
            dw.first_name = ra.first_name,
            dw.last_name  = ra.last_name,
            dw.email      = ra.email,
            dw.phone      = ra.phone,
            dw.address    = ra.address,
            dw.zip        = ra.zip
    WHEN NOT MATCHED THEN
        INSERT (rider_id, first_name, last_name, email, phone, address, zip, data_source)
        VALUES (ra.rider_id, ra.first_name, ra.last_name, ra.email, ra.phone, ra.address, ra.zip, ra.data_source);

    COMMIT;
END;
/

--------------------------------------------------------------------------------

/*
There are multiple ways to do this, like using a merge for matched records.
I'm just using the update where we can individually check each column.
*/
CREATE OR REPLACE PROCEDURE rider_etl_proc AS
BEGIN

    --Insert new records from rider_view
    INSERT INTO rider_dw (rider_id, first_name, last_name, email, phone, address, zip, data_source)
    SELECT r.rider_id, r.first_name, r.last_name, r.email, r.phone, r.address, r.zip, r.data_source
    FROM rider_view r
    WHERE NOT EXISTS (
        SELECT 1 FROM rider_dw dw
        WHERE dw.rider_id = r.rider_id AND dw.data_source = 'RIDR'
    );

    --Insert new records from riders_acquired_view
    INSERT INTO rider_dw (rider_id, first_name, last_name, email, phone, address, zip, data_source)
    SELECT a.rider_id, a.first_name, a.last_name, a.email, a.phone, a.address, a.zip, a.data_source
    FROM riders_acquired_view a
    WHERE NOT EXISTS (
        SELECT 1 FROM rider_dw dw
        WHERE dw.rider_id = a.rider_id AND dw.data_source = 'AQUI'
    );
    
    --Update existing records from rider_view
    UPDATE rider_dw dw
    SET
        first_name = (
            SELECT r.first_name FROM rider_view r
            WHERE r.rider_id = dw.rider_id AND r.data_source = dw.data_source
        ),
        last_name = (
            SELECT r.last_name FROM rider_view r
            WHERE r.rider_id = dw.rider_id AND r.data_source = dw.data_source
        ),
        email = (
            SELECT r.email FROM rider_view r
            WHERE r.rider_id = dw.rider_id AND r.data_source = dw.data_source
        ),
        phone = (
            SELECT r.phone FROM rider_view r
            WHERE r.rider_id = dw.rider_id AND r.data_source = dw.data_source
        ),
        address = (
            SELECT r.address FROM rider_view r
            WHERE r.rider_id = dw.rider_id AND r.data_source = dw.data_source
        ),
        zip = (
            SELECT r.zip FROM rider_view r
            WHERE r.rider_id = dw.rider_id AND r.data_source = dw.data_source
        )
    WHERE EXISTS (
        SELECT 1 FROM rider_view r
        WHERE r.rider_id = dw.rider_id AND r.data_source = 'RIDR'
    );

    --Update existing records from riders_acquired_view
    UPDATE rider_dw dw
    SET
        first_name = (
            SELECT a.first_name FROM riders_acquired_view a
            WHERE a.rider_id = dw.rider_id AND a.data_source = dw.data_source
        ),
        last_name = (
            SELECT a.last_name FROM riders_acquired_view a
            WHERE a.rider_id = dw.rider_id AND a.data_source = dw.data_source
        ),
        email = (
            SELECT a.email FROM riders_acquired_view a
            WHERE a.rider_id = dw.rider_id AND a.data_source = dw.data_source
        ),
        phone = (
            SELECT a.phone FROM riders_acquired_view a
            WHERE a.rider_id = dw.rider_id AND a.data_source = dw.data_source
        ),
        address = (
            SELECT a.address FROM riders_acquired_view a
            WHERE a.rider_id = dw.rider_id AND a.data_source = dw.data_source
        ),
        zip = (
            SELECT a.zip FROM riders_acquired_view a
            WHERE a.rider_id = dw.rider_id AND a.data_source = dw.data_source
        )
    WHERE EXISTS (
        SELECT 1 FROM riders_acquired_view a
        WHERE a.rider_id = dw.rider_id AND a.data_source = 'AQUI'
    );

    COMMIT;
END;
/



